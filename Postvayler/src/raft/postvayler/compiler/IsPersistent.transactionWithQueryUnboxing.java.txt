// injected into <ReturnType> @Persist methods in IsPersistent
// original method is renamed to private <ReturnType> __postvayler__<MethodName>(..)  
   
// 0: context class name
// 1: method original name
// 2: boxed return type
// 3: unboxing method


'{'
		if (!{0}.isBound()) 
			return __postvayler__{1} ( $$ );
		
		Context context = {0}.getInstance();
		if (context.inTransaction()) 
			return __postvayler__{1} ( $$ );
		
		if (context.inQuery())
			throw new PersistInSyncException();
		
		context.setInTransaction(true);
		try '{'
		    {2} boxed = ( {2} ) context.prevayler.execute(new MethodTransactionWithQuery (
					this, new MethodCall("__postvayler__{1}", $class, $sig), $args ));
			return boxed.{3}; 
		} finally '{'
			context.setInTransaction(false);
		}

}