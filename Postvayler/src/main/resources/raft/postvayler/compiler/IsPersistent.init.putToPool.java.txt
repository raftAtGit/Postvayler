// injected into top level IsPersistent constructor(s), unless there is a call to this constructor
// injected just after super constructor is called (normally not possible with plain Java code) 
// puts created object into pool and gets an id
   
// 0: context class name
// 1: current class name

if ({0}.isBound()) '{'
	Context context = {0}.getInstance();
	
	if (context.isInTransaction()) '{'
		this.__postvayler_Id = context.root.putObject(this);
	} else '{'
		//System.out.println("starting constructor transaction @{1} for " + Utils.identityCode(this));
		context.setInTransaction(true);
		context.setConstructorTransactionInitiater(this);
		
		try '{'
			ConstructorCall constructorCall = context.getConstructorCall(); 
			if (constructorCall == null) '{'
				if (getClass() != {1}.class)
					throw new Error("subclass constructor " + getClass().getName() + " is running but there is no stored constructorCall");
				
				constructorCall = new ConstructorCall({1}.class, $sig, $args);
			}
			this.__postvayler_Id = (Long) context.prevayler.execute(new ConstructorTransaction(this, constructorCall));
		} finally '{'
			context.setConstructorCall(null);
		}
	}
} else if (Context.isInRecovery()) '{'
	this.__postvayler_Id = Context.getRecoveryRoot().putObject(this);
} else '{'
	// no Postvayler, object will not have an id
	this.__postvayler_Id = null;
}

